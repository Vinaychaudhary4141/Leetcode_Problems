150. Evaluate Reverse Polish Notation

Difficulty - Medium
PROBLEM -> You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.

Note that:
The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].
____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
COMMENT: Array ko traverse karenge, jab bhi koi integer dikhega use Stack me push kr denge agar operator hoga to stack ke top two elements ko 
pop karke unke beech uss operator se operation perform krenge and uss operation ke result ko vaapis se stack m push krdenge.
IN THE LAST , st.peek() method ka use krke return krdenge.


SOLUTION:

class Solution {
    public int evalRPN(String[] tokens) {
       Stack<Integer> st= new Stack<>(); 
       return operation(st,tokens);
    }
    public static int operation(Stack<Integer> st,String[] tokens){
       for(int i=0;i<tokens.length;i++){
        if(tokens[i].equals("+")){
            int temp=st.pop();
            int ans=temp + st.pop();
            st.push(ans);
        }else if(tokens[i].equals("*")){
             int temp=st.pop();
             int ans=temp*st.pop();
             st.push(ans);
        }
        else if(tokens[i].equals("/")){
             int temp=st.pop();
             int ans=st.pop()/temp;
             st.push(ans);
        }else if(tokens[i].equals("-")){
             int temp=st.pop();
             int ans=st.pop()-temp;
             st.push(ans);
        }else{
            st.push(Integer.parseInt(tokens[i]));
        }
       }
       return st.peek();
    }
}
